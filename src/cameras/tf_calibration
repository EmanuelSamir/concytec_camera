#!/usr/bin/env python
# -*- coding: utf-8 -*-
import numpy as np
import rospy, tf, math, copy, sys
from apriltag_ros.msg import AprilTagDetectionArray
from tf.transformations import quaternion_matrix, quaternion_from_matrix
from utils import *

def main():
	# Node definition
	node_name = "tf_calibration"
	rospy.init_node(node_name, anonymous=True)
	rate = rospy.Rate(20)

	# Args for using data from a previous calibration
	use_saved_data = rospy.get_param( node_name +'/use_saved_data')
	tf_path = rospy.get_param(node_name + '/tf_config')

	# Args for camera name and tag_id of world and calibration
	num_cameras = rospy.get_param(node_name + '/num_cameras')
	tag_world = rospy.get_param(node_name + '/tag_world_id')
	tag = rospy.get_param(node_name + '/tag_calibration')

	# Args for precision of constant estimator
	train_length = rospy.get_param(node_name + '/train_length')
	max_error = rospy.get_param(node_name + '/max_error')

	# Args for topic names
	image_suffix = rospy.get_param(node_name + '/image_suffix')

	# Getting all the camera names
	## List to append all the camera names 
	camera_names = []
	camera_topics = []

	for i in range(1, num_cameras + 1):
		camera_name = '/camera_0{}'.format(i)
		camera_names.append(camera_name)
		camera_topics.append(camera_name + '/' + image_suffix)


	# Choosing if it is used saved data
	if not use_saved_data:																																																															
		rospy.loginfo('Calibrating ... ')
		# List for all the homogenous tranformation
		T_0_cameras_lst = []

		# Append transformation between world and first node
		T_0_cameras_lst.append(calibration_first_node(camera_names[0], tag_world, rate, train_length, max_error))

		# Append transformation between world and nodes
		for i in range(len(camera_names)-1):
			# Transformation between i_node and i+1_node 
			T_i_ip1 = calibration_between_two_nodes(camera_names[i], camera_names[i+1], tag, rate, train_length, max_error)
			# Transformation between world and i+1_node recursively
			T_0_ip1 = T_0_cameras_lst[-1].dot(T_i_ip1)
			# Append transformation between world and i_node
			T_0_cameras_lst.append(T_0_ip1)

		rospy.loginfo('Saving tf ...')

		# Save all collected transformations as np files in tf_path
		for i, T_0_camera in enumerate(T_0_cameras_lst):
			with open(tf_path + '/t0{}'.format(i+1), 'wb') as f:
				np.save(f, T_0_camera)

	else:
		rospy.loginfo('Using saved data instead of calibration')
		# List for all the homogenous tranformation
		T_0_cameras_lst = []

		# Read all the transformations for every camera
		for i in range(num_cameras):
			with open(tf_path + '/t0{}'.format(i+1), 'rb') as f:
				T_0_cameras_lst.append(np.load(f))

	rospy.loginfo('tf ready for broadcasting ...')

	# # Broadcasting tf 
	# if True:
	#print(T_0_cameras_lst)
	for i in range(len(T_0_cameras_lst)):
	#	print(T_0_cameras_lst[i])
		rot_pitch_roll = euler_ypr_to_se3([-1.5714, -1.5714, 0])
		T_0_cameras_lst[i] = np.dot(T_0_cameras_lst[i],rot_pitch_roll)
	#	print(T_0_cameras_lst[i])
	#print(T_0_cameras_lst)

	# tf_0_1 = mat2pose(T_0_1)
	# tf_0_2 = mat2pose(T_0_2)

	rospy.loginfo('tf are broadcasted successfully')
	
	while not rospy.is_shutdown():
		# Broadcasting tf por every camera 
		for i, camera_name in enumerate(camera_names):
			# Transformations -> poses
			tf_0_c = mat2pose(T_0_cameras_lst[i])
			broadcaster = tf.TransformBroadcaster()
			broadcaster.sendTransform(
								(tf_0_c[0], tf_0_c[1], tf_0_c[2]),
								(tf_0_c[3], tf_0_c[4], tf_0_c[5], tf_0_c[6]),
								rospy.Time.now(),
								camera_name + "_link",
								"world")
		rate.sleep()

if __name__ == '__main__':
	main()
