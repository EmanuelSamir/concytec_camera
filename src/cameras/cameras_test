#!/usr/bin/env python
# -*- coding: utf-8 -*-
import numpy as np
import rospy, tf, math

from geometry_msgs.msg import WrenchStamped
from tf.transformations import quaternion_matrix
from ar_track_alvar_msgs.msg import AlvarMarkers
import copy

from tf.transformations import euler_from_quaternion, quaternion_from_euler, \
                               quaternion_matrix, quaternion_from_matrix
from geometry_msgs.msg import PoseStamped, Pose, Point, Quaternion
from std_msgs.msg import Header
import numpy as np
import json
import sys

import time

PATH = '../config/tf'


def pose2mat(pose):
	T = quaternion_matrix(pose[3:])
	T[:3,3] = np.array(pose[:3])
	return T

def mat2pose(m):
    q = np.expand_dims(quaternion_from_matrix(m), axis = 1)
    p = np.expand_dims(m[:3,3], axis = 1)
    pose = np.vstack((p,q))
    return pose

def T_inv(T_in):
    R_in = T_in[:3,:3]
    t_in = T_in[:3,[-1]]
    R_out = R_in.T
    t_out = -np.matmul(R_out,t_in)
    return np.vstack((np.hstack((R_out,t_out)),np.array([0, 0, 0, 1])))

class ArTagTracker:
    def __init__(self, camera_ns):
        """
        Class to get artag poses for a camera.
        Args: camera_ns:= Camera namespace group (e.g. /camera_1)
        """
        artag_pose_topic = camera_ns + '/ar_pose_marker'
        rospy.Subscriber(artag_pose_topic, AlvarMarkers, self.cb)
        
        self.poses = dict()

    def cb(self, msg):
        tag_ids = []
        poses = []
        for marker in msg.markers:
            tag_ids.append(marker.id) 
            o = marker.pose.pose.orientation
            p = marker.pose.pose.position
            poses.append(np.array([p.x, p.y, p.z, o.x, o.y, o.z, o.w]))
        self.poses = dict(zip(tag_ids, poses))


def main():
	# Node definition
	rospy.init_node("artag_tracker", anonymous=True)
	rate = rospy.Rate(20)

	ID_TMP = 0
	ID_1 = 1

	tracker_camera1 = ArTagTracker('/camera1')
	tracker_camera2 = ArTagTracker('/camera2')

	time.sleep(1)

	print(tracker_camera1.poses)
	# p_1_2
	p_1_tmp = tracker_camera1.poses[ID_TMP]
	p_2_tmp = tracker_camera2.poses[ID_TMP]

	T_1_tmp = pose2mat(p_1_tmp)
	T_2_tmp = pose2mat(p_2_tmp)
	
	T_tmp_2 = T_inv(T_2_tmp)

	p_tmp_2 = mat2pose(T_tmp_2)

	T_1_2 = T_1_tmp.dot(T_tmp_2)

	p_1_2 = mat2pose(T_1_2)


	# p_0_1
	p_1_0 = tracker_camera1.poses[ID_1]
	T_1_0 = pose2mat(p_1_0)
	
	T_0_1 = T_inv(T_1_0)

	p_0_1 = mat2pose(T_0_1)

	T_0_2 = T_0_1.dot(T_1_2)


	# Broadcasting tf 
	tf_0_1 = mat2pose(T_0_1)
	tf_0_2 = mat2pose(T_0_2)


	while not rospy.is_shutdown():
		broadcaster01 = tf.TransformBroadcaster()
		broadcaster01.sendTransform(
							(tf_0_1[0], tf_0_1[1], tf_0_1[2]),
							(tf_0_1[3], tf_0_1[4], tf_0_1[5], tf_0_1[6]),
							rospy.Time.now(),
							"camera1",
							"world")

		broadcaster02 = tf.TransformBroadcaster()
		broadcaster02.sendTransform(
							(tf_0_2[0], tf_0_2[1], tf_0_2[2]),
							(tf_0_2[3], tf_0_2[4], tf_0_2[5], tf_0_2[6]),
							rospy.Time.now(),
							"camera2",
							"world")

		broadcaster03 = tf.TransformBroadcaster()
		broadcaster03.sendTransform(
							(p_1_2[0], p_1_2[1], p_1_2[2]),
							(p_1_2[3], p_1_2[4], p_1_2[5], p_1_2[6]),
							rospy.Time.now(),
							"camera3",
							"world")
		rate.sleep()

if __name__ == '__main__':
    main()

